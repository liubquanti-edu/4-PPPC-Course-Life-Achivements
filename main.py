from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
import random
import firebase_admin
from firebase_admin import credentials, firestore
from config import TOKEN, FIREBASE

# Firebase setup
cred = credentials.Certificate(FIREBASE)
firebase_admin.initialize_app(cred)
db = firestore.client()

# Bot setup
app = Application.builder().token(TOKEN).build()

# –°—Ç–∞–Ω –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
WAITING_FOR_COMPLETION_DESCRIPTION = 1

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    achievement_id = context.args[0] if context.args else None
    
    if achievement_id:
        achievement = db.collection('achievements').document(achievement_id).get()
        if achievement.exists:
            achievement_data = achievement.to_dict()
            await send_random_achievement_details(update.message, achievement_data)
            return

    keyboard = [
        [InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='random')],
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='find')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def send_achievement_details(message, achievement, achievement_id):
    keyboard = [
        [InlineKeyboardButton("üìù –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data=f'complete_{achievement_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_photo(
        photo=achievement['photo_url'],
        caption=f"{achievement['title']}\n\n{achievement['description']}",
        reply_markup=reply_markup
    )

async def send_random_achievement_details(message, achievement):
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ", callback_data='new_random')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_photo(
        photo=achievement['photo_url'],
        caption=f"{achievement['title']}\n\n{achievement['description']}",
        reply_markup=reply_markup
    )

# Callback for menu buttons
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'random':
        await send_random_achievement(query)
    elif query.data == 'find':
        await list_achievements(query)
    elif query.data == 'stats':
        await send_stats(query)
    elif query.data == 'new_random':
        await send_random_achievement(query, edit=True)
    elif query.data == 'main_menu':
        await query.message.delete()
    elif query.data.startswith('achievement_'):
        achievement_id = query.data.split('_')[1]
        achievement = db.collection('achievements').document(achievement_id).get()
        if achievement.exists:
            await send_achievement_details(query.message, achievement.to_dict(), achievement_id)
    elif query.data.startswith('complete_'):
        achievement_id = query.data.split('_')[1]
        context.user_data['achievement_id'] = achievement_id
        await query.message.reply_text("–û–ø–∏—à—ñ—Ç—å, —è–∫ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ —Ü–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:")
        return WAITING_FOR_COMPLETION_DESCRIPTION  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω

async def save_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    achievement_id = context.user_data.get('achievement_id')
    user_id = update.effective_user.id
    description = update.message.text

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É Firestore
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})
    completed_achievements[achievement_id] = {'description': description}
    user_ref.set({'completed_achievements': completed_achievements}, merge=True)

    await update.message.reply_text("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ‚úÖ")
    return ConversationHandler.END


# Cancel handler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# Register handlers
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        WAITING_FOR_COMPLETION_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_completion)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_completion))

# –û—Å—Ç–∞–Ω–Ω—î –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
last_achievement_id = None

async def send_random_achievement(query, edit=False):
    global last_achievement_id
    achievements_ref = db.collection('achievements').stream()
    achievements = [(ach.id, ach.to_dict()) for ach in achievements_ref]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    if not achievements:
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å.")
        return

    # –ü–æ—à—É–∫ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    achievement_id, achievement = random.choice(achievements)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–æ—Å—è –æ—Å—Ç–∞–Ω–Ω—î –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    while achievement['photo_url'] == last_achievement_id and len(achievements) > 1:
        achievement_id, achievement = random.choice(achievements)

    last_achievement_id = achievement['photo_url']  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π photo_url

    # –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ `achievement_id`
    keyboard = [
        [InlineKeyboardButton("üìù –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data=f'complete_{achievement_id}')],
        [InlineKeyboardButton("üîÑ –ù–æ–≤–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ", callback_data='new_random')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º
    if edit:
        await query.message.edit_media(
            media=InputMediaPhoto(
                media=achievement['photo_url'],
                caption=f"{achievement['title']}\n{achievement['description']}"
            ),
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_photo(
            photo=achievement['photo_url'],
            caption=f"{achievement['title']}\n{achievement['description']}",
            reply_markup=reply_markup
        )

async def list_achievements(query):
    user_id = query.from_user.id
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    achievements_ref = db.collection('achievements').stream()
    achievements = [(ach.id, ach.to_dict()) for ach in achievements_ref]
    
    if not achievements:
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å.")
        return
    
    # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å
    keyboard = []
    for achievement_id, achievement in achievements:
        title = achievement['title']
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å
        if achievement_id in completed_achievements:
            title += " ‚úÖ"
        
        keyboard.append([InlineKeyboardButton(title, callback_data=f'achievement_{achievement_id}')])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:", reply_markup=reply_markup)


async def send_stats(query):
    users_ref = db.collection('users').stream()
    completed_count = sum(1 for _ in users_ref)
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(f"–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ {completed_count} –¥–æ—Å—è–≥–Ω–µ–Ω—å.", reply_markup=reply_markup)

if __name__ == "__main__":
    app.run_polling()
