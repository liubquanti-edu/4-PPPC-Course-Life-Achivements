from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, ContextTypes, filters
import random
import firebase_admin
from firebase_admin import credentials, firestore
from config import TOKEN, FIREBASE

cred = credentials.Certificate(FIREBASE)
firebase_admin.initialize_app(cred)
db = firestore.client()

app = Application.builder().token(TOKEN).build()

WAITING_FOR_COMPLETION_DESCRIPTION = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_ref = db.collection('users').document(str(user.id))
    
    if not user_ref.get().exists:
        user_ref.set({
            'username': user.full_name,
            'completed_achievements': {}
        }, merge=True)
    
    achievement_id = context.args[0] if context.args else None
    if achievement_id:
        achievement = db.collection('achievements').document(achievement_id).get()
        if achievement.exists:
            achievement_data = achievement.to_dict()
            await send_random_achievement_details(update.message, achievement_data)
            return

    keyboard = [
        [InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='random')],
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='find')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã¬† ‚Ä¢¬† –í—ñ—Ç–∞—î–º–æ —É White Life!\n\n‚úÖ¬† ‚Ä¢¬† –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –∂–∏—Ç—Ç—î–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ –¥—ñ–ª–∏—Ç–∏—Å—è —Ü–∏–º –∑ –¥—Ä—É–∑—è–º–∏.\n\n‚öôÔ∏è¬† ‚Ä¢¬† –§—É–Ω–∫—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –º–µ–Ω—é /command.\n\nüîΩ¬† ‚Ä¢¬† –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def send_achievement_details(message, achievement, achievement_id, user_id):
    users_ref = db.collection('users').stream()
    completed_count = sum(1 for user in users_ref if achievement_id in user.to_dict().get('completed_achievements', {}))
    
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})
    user_completion_text = completed_achievements.get(achievement_id, {}).get('description', None)
    
    achievement_text = f"<b>‚≠ê  ‚Ä¢  {achievement['title']}</b>\nüåê  ‚Ä¢  –í–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏: {completed_count}\n\n<blockquote>{achievement['description']}</blockquote>"
    
    if user_completion_text:
        achievement_text += f"\n\nüìù¬† ‚Ä¢¬† –í–∞—à –æ–ø–∏—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:\n\n<blockquote>{user_completion_text}</blockquote>"
    
    if user_completion_text:
        keyboard = [
            [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", callback_data=f'complete_{achievement_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìù –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data=f'complete_{achievement_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_photo(
        photo=achievement['photo_url'],
        caption=achievement_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è¬† ‚Ä¢¬† –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ –ø–æ–ª—è –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

async def send_random_achievement_details(message, achievement):
    keyboard = [
        [InlineKeyboardButton("üîÑ –Ü–Ω—à–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='new_random')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_photo(
        photo=achievement['photo_url'],
        caption=f"{achievement['title']}\n\n{achievement['description']}",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == 'random':
        await send_random_achievement(query)
    elif query.data == 'find':
        await list_achievements(query)
    elif query.data == 'stats':
        await send_stats(query)
    elif query.data == 'global_stats':
        await send_global_stats(query) 
    elif query.data == 'new_random':
        await send_random_achievement(query, edit=True)
    elif query.data == 'main_menu':
        await query.message.delete()
    elif query.data.startswith('achievement_'):
        achievement_id = query.data.split('_')[1]
        achievement = db.collection('achievements').document(achievement_id).get()
        if achievement.exists:
            await send_achievement_details(query.message, achievement.to_dict(), achievement_id, user_id)
    elif query.data.startswith('complete_'):
        achievement_id = query.data.split('_')[1]
        context.user_data['achievement_id'] = achievement_id
        await query.message.reply_text("üí¨¬† ‚Ä¢¬† –û–ø–∏—à—ñ—Ç—å, —è–∫ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ —Ü–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:")
        return WAITING_FOR_COMPLETION_DESCRIPTION

async def save_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    achievement_id = context.user_data.get('achievement_id')
    user_id = update.effective_user.id
    description = update.message.text

    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})
    completed_achievements[achievement_id] = {'description': description}
    user_ref.set({'completed_achievements': completed_achievements}, merge=True)

    await update.message.reply_text("‚úÖ¬† ‚Ä¢¬† –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        WAITING_FOR_COMPLETION_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_completion)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

async def change_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    new_username = ' '.join(context.args)  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º —ñ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–µ —ñ–º'—è
    if not new_username:
        await update.message.reply_text("‚öôÔ∏è¬† ‚Ä¢¬† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: \n/username –ù—ñ–∫–Ω–µ–π–º")
        return

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    user_ref = db.collection('users').document(str(user_id))
    user_ref.update({
        'username': new_username
    })

    await update.message.reply_text(f"‚öôÔ∏è¬† ‚Ä¢¬† –í–∞—à –Ω—ñ–∫–Ω–µ–π–º –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {new_username}")

async def toggle_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    is_private = user_data.get('privacy', False)  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î —Ü—å–æ–≥–æ –ø–æ–ª—è, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å –ø—É–±–ª—ñ—á–Ω–∏–π

    # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
    new_privacy_status = not is_private

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É Firebase
    user_ref.update({
        'privacy': new_privacy_status
    })

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
    if new_privacy_status:
        await update.message.reply_text("üîí¬† ‚Ä¢¬† –í–∞—à —Å—Ç–∞—Ç—É—Å –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>–ø—Ä–∏–≤–∞—Ç–Ω–∏–π</b>. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å —É –≥–ª–æ–±–∞–ª—å–Ω—ñ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ.", parse_mode='HTML')
    else:
        await update.message.reply_text("üîì¬† ‚Ä¢¬† –í–∞—à —Å—Ç–∞—Ç—É—Å –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>–ø—É–±–ª—ñ—á–Ω–∏–π</b>. –í–∏ –∑–Ω–æ–≤—É –±—É–¥–µ—Ç–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å —É –≥–ª–æ–±–∞–ª—å–Ω—ñ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ.", parse_mode='HTML')

privacy_handler = CommandHandler("privacy", toggle_privacy)
app.add_handler(privacy_handler)
command_handler = CommandHandler("command", command)
app.add_handler(command_handler)
username_handler = CommandHandler("username", change_username)
app.add_handler(username_handler)
app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_completion))

last_achievement_id = None

async def send_random_achievement(query, edit=False):
    global last_achievement_id
    user_id = query.from_user.id
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})

    achievements_ref = db.collection('achievements').stream()
    achievements = [
        (ach.id, ach.to_dict()) for ach in achievements_ref
        if ach.id not in completed_achievements
    ]

    if not achievements:
        await query.message.reply_text("‚≠ê¬† ‚Ä¢¬† –£—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
        return

    achievement_id, achievement = random.choice(achievements)
    
    while achievement_id == last_achievement_id and len(achievements) > 1:
        achievement_id, achievement = random.choice(achievements)

    last_achievement_id = achievement_id

    keyboard = [
        [InlineKeyboardButton("üîÑ –Ü–Ω—à–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data='new_random')],
        [InlineKeyboardButton("üìù –í–∏–∫–æ–Ω–∞—Ç–∏", callback_data=f'complete_{achievement_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if edit:
        users_ref = db.collection('users').stream()
        completed_count = sum(1 for user in users_ref if achievement_id in user.to_dict().get('completed_achievements', {}))

        await query.message.edit_media(
            media=InputMediaPhoto(
            media=achievement['photo_url'],
            caption=f"<b>‚≠ê¬† ‚Ä¢¬† {achievement['title']}</b>\nüåê¬† ‚Ä¢¬† –í–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏: {completed_count}\n\n<blockquote>{achievement['description']}</blockquote>",
            parse_mode='HTML'
            ),
            reply_markup=reply_markup
        )
    else:
        users_ref = db.collection('users').stream()
        completed_count = sum(1 for user in users_ref if achievement_id in user.to_dict().get('completed_achievements', {}))

        await query.message.reply_photo(
            photo=achievement['photo_url'],
            caption=f"<b>‚≠ê¬† ‚Ä¢¬† {achievement['title']}</b>\nüåê¬† ‚Ä¢¬† –í–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏: {completed_count}\n\n<blockquote>{achievement['description']}</blockquote>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

async def list_achievements(query):
    user_id = query.from_user.id
    user_ref = db.collection('users').document(str(user_id))
    user_data = user_ref.get().to_dict() or {}
    completed_achievements = user_data.get('completed_achievements', {})

    achievements_ref = db.collection('achievements').stream()
    achievements = [(ach.id, ach.to_dict()) for ach in achievements_ref]
    
    if not achievements:
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å.")
        return
    
    keyboard = []
    for achievement_id, achievement in achievements:
        title = achievement['title']
        
        if achievement_id in completed_achievements:
            title = "‚úÖ " + title
        else:
            title = "‚ùå " + title
        
        keyboard.append([InlineKeyboardButton(title, callback_data=f'achievement_{achievement_id}')])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("‚≠ê¬† ‚Ä¢¬† –û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:", reply_markup=reply_markup)


async def send_stats(query):
    user_id = str(query.from_user.id)
    user_ref = db.collection('users').document(user_id).get()
    
    user_data = user_ref.to_dict() if user_ref.exists else {}
    completed_achievements = user_data.get('completed_achievements', {})

    completed_count = len(completed_achievements)
    achievements_list = "\n".join(
        [f"‚≠ê¬† ‚Ä¢¬† {db.collection('achievements').document(ach_id).get().to_dict().get('title', '–ù–µ–≤—ñ–¥–æ–º–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è')}"
         for ach_id in completed_achievements]
    )
    
    stats_text = f"üìä¬† ‚Ä¢¬† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n\n‚úÖ¬† ‚Ä¢¬† –í–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å: {completed_count}\n\n"
    if achievements_list:
        stats_text += f"üìÉ¬† ‚Ä¢¬† –°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å:\n{achievements_list}"
    else:
        stats_text += "–í–∏ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è."

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
        [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='global_stats')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(stats_text, reply_markup=reply_markup)


async def send_global_stats(query):
    users_ref = db.collection('users').stream()
    
    users_completed_count = []
    for user in users_ref:
        user_data = user.to_dict()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
        if user_data.get('privacy', False):  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
            continue
        
        completed_achievements = user_data.get('completed_achievements', {})
        username = user_data.get('username', '–ê–Ω–æ–Ω—ñ–º')
        users_completed_count.append((username, len(completed_achievements)))

    top_users = sorted(users_completed_count, key=lambda x: x[1], reverse=True)[:10]
    
    global_stats_message = "üèÜ¬† ‚Ä¢¬† –¢–æ–ø 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–æ—Å—è–≥–Ω–µ–Ω—å:\n\n"
    for i, (username, count) in enumerate(top_users, start=1):
        if i == 1:
            medal = "ü•á¬† ‚Ä¢¬† "
        elif i == 2:
            medal = "ü•à¬† ‚Ä¢¬† "
        elif i == 3:
            medal = "ü•â¬† ‚Ä¢¬† "
        else:
            medal = "üèÖ¬† ‚Ä¢¬† "
        global_stats_message += f"{medal} {username}: {count}\n"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(global_stats_message, reply_markup=reply_markup)

if __name__ == "__main__":
    app.run_polling()